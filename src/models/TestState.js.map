{"version":3,"file":"TestState.js","sourceRoot":"","sources":["TestState.ts"],"names":[],"mappings":"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","sourcesContent":["import { Answer,TestRecord,QuestionResult } from './cources';\r\n\r\nclass TestState {\r\n\r\n    constructor() {}\r\n\r\n//    private _ischanged: boolean=false;\r\n   \r\n//    public get IsChanged() : boolean {  return  this._ischanged;   }\r\n    \r\n\r\nprivate  _timeofstart:Date;\r\nprivate  _timeofend:Date;\r\n\r\n\r\n    private _choices:{[key:number]:number}=[];\r\n    public get choices() : {[key:number]:number} {\r\n        return  this._choices;\r\n    }\r\n    \r\n\r\n    public get CurrentComponent() : string \r\n    {\r\n//        return this._CurrentComponent; \r\n\r\n        if (this._CurrentTest==null)   return   'list-cources';\r\n        if (this._CurrentQuestion==0)   return   'test-start';\r\n        if ((this._CurrentQuestion>0) && (!this.TestIsRunning)) return 'test-results';\r\n        if ((this.TestIsRunning)&& this._inResultsPage) return 'test-results';\r\n        return  'test-doing';\r\n    }\r\n  \r\n\r\n\r\n\r\n    private _CurrentTest:TestRecord=null;\r\n  \r\n    public set CurrentTest(v : TestRecord) { \r\n        this._CurrentTest = v; \r\n        this._CurrentQuestion=0; \r\n//        this.SetCurrentComponent();\r\n    }\r\n   \r\n    public get CurrentTest() : TestRecord { return this._CurrentTest;  }\r\n    \r\n\r\n    private _CurrentQuestion:number=0;\r\n    public get CurrentQuestion() : number { return this._CurrentQuestion;}\r\n    \r\n\r\n    \r\n    public get enable2results() : boolean \r\n    { \r\n        return  (this._CurrentTest!=null)&&(this.Questions_Cnt==this._choices.length-1);\r\n    }\r\n    \r\n    private _inResultsPage:boolean=false;\r\n    public Enter2ResultsPage():void\r\n    {\r\n        this._inResultsPage=false;\r\n        if (!this.enable2results)   return;\r\n        this._inResultsPage=true;\r\n    }\r\n\r\n    public FromResultsPageBackToTest():void\r\n    {\r\n        if (!this.TestIsRunning)   return;\r\n        this._inResultsPage=false;\r\n    }\r\n\r\n\r\n\r\n\r\n    public get Question() : string \r\n    {\r\n        if (this._CurrentTest==null)    return  '';\r\n        if (this._CurrentQuestion==0)   return  '';\r\n        let _rez:string=this._CurrentTest.questions.find(_v=>_v.id==this._CurrentQuestion).question;\r\n        return  _rez; \r\n    }\r\n\r\n    \r\n    \r\n    public get Questions_Cnt() : number \r\n    {\r\n        if (this._CurrentTest==null)    return  0;\r\n        if (this._CurrentQuestion==0)   return  0;\r\n        let _rez:number=this._CurrentTest.questions.length;\r\n        return  _rez; \r\n    }\r\n\r\n\r\n\r\n\r\n    public get GoodAnswer():number\r\n    {\r\n        if (this._CurrentTest==null)    return  0;\r\n        if (this._CurrentQuestion==0)   return  0;\r\n        let _rez:number=this._CurrentTest.questions.find(_v=>_v.id==this._CurrentQuestion).good_answ;\r\n        return  _rez; \r\n    }\r\n\r\n    \r\n    \r\n    public get SelectedAnswer():number\r\n    {\r\n        var _choice=this.choices[this.CurrentQuestion];\r\n        if (_choice==undefined) return  0;\r\n        return  _choice;\r\n    }\r\n\r\n\r\n    public get CurrentAnswer():string\r\n    {\r\n        var _choice=this.choices[this.CurrentQuestion];\r\n        if (_choice==undefined) return  '';\r\n        var _answ=this.Answers[_choice-1];\r\n        if (_answ==undefined) return  '';\r\n        return  _answ.answer;\r\n    }\r\n\r\n\r\n    public get Answers() : Answer[] {\r\n        if (this._CurrentTest==null)    return  [];\r\n        if (this._CurrentQuestion==0)   return  [];\r\n        return  this._CurrentTest.questions[this._CurrentQuestion-1].answers;\r\n    }\r\n    \r\n    public SelectAnswer(_id:number):void\r\n    {\r\n        this._choices[this.CurrentQuestion]=_id;\r\n        this._choices=this._choices.map(t=>t);\r\n    }\r\n\r\n\r\n    public get Title() : string {\r\n        if (this._CurrentTest==null)    return  \"\";\r\n        return  this._CurrentTest.title;\r\n    }\r\n    \r\n\r\n    public Next():void {\r\n        if(this._CurrentTest==null) return;\r\n        if(this.CurrentQuestion>=this._CurrentTest.questions.length)    return;\r\n        this._CurrentQuestion++;\r\n    }        \r\n\r\n    public Prev():void {\r\n        if(this._CurrentTest==null) return;\r\n        if(this.CurrentQuestion<2)    return;\r\n        this._CurrentQuestion--;\r\n    }        \r\n    \r\n\r\n    public StartTest():void\r\n    {\r\n        if (this._CurrentTest==null)    return;\r\n        this._CurrentQuestion=1;\r\n        this._choices=[];\r\n\r\n        let _start=new Date();\r\n        let _min=_start.getMinutes();\r\n        let _sec=_start.getSeconds();\r\n        let _end=_start;\r\n        _end.setSeconds(_sec);\r\n        _end.setMinutes(_min+this._CurrentTest.exec_time_min);\r\n\r\n        this._timeofstart=_start;\r\n        this._timeofend=_end;\r\n\r\n        this._handletimer=setInterval(() => { this._refresh(); }, 1000);\r\n\r\n    }    \r\n    \r\n\r\n    private _handletimer:number;\r\n\r\n    public TestIsRunning:boolean=false;\r\n\r\n    private get _TestIsRunning() : boolean \r\n    {\r\n        if (this._CurrentTest==null)    return  false;\r\n        if (this._CurrentQuestion<1)    return  false;\r\n\r\n        let _now=new Date();\r\n        let _diff:number=this._timeofend-_now;\r\n        if (_diff<1)    \r\n        {\r\n            clearInterval(this._handletimer);\r\n            return  false;  \r\n        }\r\n\r\n        return  true;\r\n    }\r\n\r\n    \r\n    public TimeLeftString:string='';\r\n\r\n    private get _TimeLeftString() : string \r\n    {\r\n        if (!this.TestIsRunning)    return 'stopping'; \r\n        let _now=new Date();\r\n        let _diff:number=this._timeofend-_now;\r\n        var _tdiff=new Date(_diff);\r\n        let _min=_tdiff.getMinutes();\r\n        let _sec=_tdiff.getSeconds();\r\n\r\n        let _rez=(_min>0) ? `${_min} m  ${_sec} s` : `${_sec} s`;\r\n        return  _rez;\r\n    }\r\n    \r\n\r\n    private _refresh():void\r\n    {\r\n        this.TestIsRunning=this._TestIsRunning;\r\n        this.TimeLeftString=this._TimeLeftString;\r\n    }\r\n\r\n    public SetTO2_10s():void\r\n    { \r\n        if (!this.TestIsRunning)    return; \r\n        let _end=new Date();\r\n        let _sec=_end.getSeconds();\r\n        _end.setSeconds(_sec+11);\r\n        this._timeofend=_end;\r\n    }\r\n\r\n    public CancelTest():void\r\n    {\r\n        this._CurrentTest=null;\r\n        this._CurrentQuestion=0;\r\n        this._inResultsPage=false;\r\n        this._refresh();\r\n    }  \r\n    \r\n    \r\n\r\n    public GetTestResults():QuestionResult[]\r\n    {\r\n        if (this._CurrentTest==null)    return  [];\r\n        let _rez:Array<QuestionResult>=[];\r\n\r\n        for (const _q of this._CurrentTest.questions) {\r\n            let _qr=new QuestionResult();\r\n            _qr.id=_q.id;\r\n            _qr.question=_q.question;\r\n            _qr.answer_good=_q.answers.find(_a=>_a.id==_q.good_answ).answer;\r\n            _qr.answer_user='';\r\n            let _indx=this._choices[_q.id];\r\n            if (_indx>0)\r\n            {\r\n                _qr.answer_user=_q.answers.find(_a=>_a.id==_indx).answer;\r\n            }\r\n            _rez.push(_qr);\r\n        }\r\n\r\n        return _rez;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport   {TestState};"]}